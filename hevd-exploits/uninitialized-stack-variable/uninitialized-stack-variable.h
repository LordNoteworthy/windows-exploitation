#pragma once

#include <Windows.h>
#include <tchar.h>
#include <ntstatus.h>

typedef time_t TIME;

typedef struct _CLIENT_ID {
	PVOID UniqueProcess;
	PVOID UniqueThread;
} CLIENT_ID, *PCLIENT_ID;

typedef struct _LSA_UNICODE_STRING {
	USHORT Length;
	USHORT MaximumLength;
	PWSTR  Buffer;
} LSA_UNICODE_STRING, *PLSA_UNICODE_STRING, UNICODE_STRING, *PUNICODE_STRING;

typedef struct _OBJECT_ATTRIBUTES {
	ULONG           Length;
	HANDLE          RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG           Attributes;
	PVOID           SecurityDescriptor;
	PVOID           SecurityQualityOfService;
} OBJECT_ATTRIBUTES, *POBJECT_ATTRIBUTES;

typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY {
	PVOID  Unknown1;
	PVOID  Unknown2;
	PVOID  Base;
	ULONG  Size;
	ULONG  Flags;
	USHORT Index;
	USHORT NameLength;
	USHORT LoadCount;
	USHORT PathLength;
	CHAR   ImageName[256];
} SYSTEM_MODULE_INFORMATION_ENTRY, *PSYSTEM_MODULE_INFORMATION_ENTRY;

typedef struct _SYSTEM_MODULE_INFORMATION {
	ULONG   Count;
	SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

typedef enum _SYSTEM_INFORMATION_CLASS {
	SystemModuleInformation = 11,
	SystemHandleInformation = 16
} SYSTEM_INFORMATION_CLASS;

typedef enum _PROCESSINFOCLASS {
	ProcessBasicInformation,
	ProcessQuotaLimits,
	ProcessIoCounters,
	ProcessVmCounters,
	ProcessTimes,
	ProcessBasePriority,
	ProcessRaisePriority,
	ProcessDebugPort,
	ProcessExceptionPort,
	ProcessAccessToken,
	ProcessLdtInformation,
	ProcessLdtSize,
	ProcessDefaultHardErrorMode,
	ProcessIoPortHandlers,
	ProcessPooledUsageAndLimits,
	ProcessWorkingSetWatch,
	ProcessUserModeIOPL,
	ProcessEnableAlignmentFaultFixup,
	ProcessPriorityClass,
	ProcessWx86Information,
	ProcessHandleCount,
	ProcessAffinityMask,
	ProcessPriorityBoost,
	ProcessDeviceMap,
	ProcessSessionInformation,
	ProcessForegroundInformation,
	ProcessWow64Information,
	ProcessImageFileName,
	ProcessLUIDDeviceMapsEnabled,
	ProcessBreakOnTermination,
	ProcessDebugObjectHandle,
	ProcessDebugFlags,
	ProcessHandleTracing,
	ProcessIoPriority,
	ProcessExecuteFlags,
	ProcessTlsInformation,
	ProcessCookie,
	ProcessImageInformation,
	ProcessCycleTime,
	ProcessPagePriority,
	ProcessInstrumentationCallback,
	ProcessThreadStackAllocation,
	ProcessWorkingSetWatchEx,
	ProcessImageFileNameWin32,
	ProcessImageFileMapping,
	ProcessAffinityUpdateMode,
	ProcessMemoryAllocationMode,
	ProcessGroupInformation,
	ProcessTokenVirtualizationEnabled,
	ProcessConsoleHostProcess,
	ProcessWindowInformation,
	MaxProcessInfoClass
} PROCESSINFOCLASS;

typedef struct _PROCESS_ACCESS_TOKEN {
	HANDLE Token;
	HANDLE Thread;
} PROCESS_ACCESS_TOKEN, *PPROCESS_ACCESS_TOKEN;

typedef struct _EPROCESS {
	UCHAR NotNeeded1[0x26C];
	union {
		ULONG Flags2;
		struct {
			ULONG JobNotReallyActive : 1;
			ULONG AccountingFolded : 1;
			ULONG NewProcessReported : 1;
			ULONG ExitProcessReported : 1;
			ULONG ReportCommitChanges : 1;
			ULONG LastReportMemory : 1;
			ULONG ReportPhysicalPageChanges : 1;
			ULONG HandleTableRundown : 1;
			ULONG NeedsHandleRundown : 1;
			ULONG RefTraceEnabled : 1;
			ULONG NumaAware : 1;
			ULONG ProtectedProcess : 1;
			ULONG DefaultPagePriority : 3;
			ULONG PrimaryTokenFrozen : 1;
			ULONG ProcessVerifierTarget : 1;
			ULONG StackRandomizationDisabled : 1;
			ULONG AffinityPermanent : 1;
			ULONG AffinityUpdateEnable : 1;
			ULONG PropagateNode : 1;
			ULONG ExplicitAffinity : 1;
		};
	};
	UCHAR NotNeeded2[0x50];
} EPROCESS, *PEPROCESS;

typedef struct _PROCESS_DEVICEMAP_INFORMATION {
	HANDLE DirectoryHandle;
} PROCESS_DEVICEMAP_INFORMATION, *PPROCESS_DEVICEMAP_INFORMATION;


typedef NTSTATUS(WINAPI *ZwClose_t)(IN HANDLE hObject);

typedef PEPROCESS(WINAPI *PsGetCurrentProcess_t)(VOID);

typedef PACCESS_TOKEN(WINAPI *PsReferencePrimaryToken_t)(IN OUT PVOID Process);

typedef NTSTATUS(WINAPI *NtQueryIntervalProfile_t)(IN ULONG   ProfileSource,
	OUT PULONG Interval);

typedef NTSTATUS(WINAPI *ZwOpenProcessToken_t)(IN HANDLE      ProcessHandle,
	IN ACCESS_MASK DesiredAccess,
	OUT PHANDLE    TokenHandle);

typedef NTSTATUS(WINAPI *PsLookupProcessByProcessId_t)(IN HANDLE ProcessId,
	OUT PVOID Process);

typedef NTSTATUS(WINAPI *ZwSetInformationProcess_t)(IN HANDLE ProcessHandle,
	IN ULONG  ProcessInformationClass,
	IN PVOID  ProcessInformation,
	IN ULONG  ProcessInformationLength);

typedef NTSTATUS(WINAPI *ZwOpenProcess_t)(OUT PHANDLE           ProcessHandle,
	IN ACCESS_MASK        DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	IN PCLIENT_ID         ClientId OPTIONAL);

typedef NTSTATUS(WINAPI *NtAllocateVirtualMemory_t)(IN HANDLE     ProcessHandle,
	IN OUT PVOID  *BaseAddress,
	IN ULONG      ZeroBits,
	IN OUT PULONG AllocationSize,
	IN ULONG      AllocationType,
	IN ULONG      Protect);

typedef NTSTATUS(WINAPI *NtAllocateReserveObject_t)(OUT PHANDLE           hObject,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	IN DWORD              ObjectType);

typedef NTSTATUS(WINAPI *NtMapUserPhysicalPages_t)(IN PVOID          VirtualAddress,
	IN ULONG_PTR      NumberOfPages,
	IN OUT PULONG_PTR UserPfnArray);

typedef NTSTATUS(WINAPI *ZwDuplicateToken_t)(IN HANDLE             ExistingTokenHandle,
	IN ACCESS_MASK        DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	IN BOOLEAN            EffectiveOnly,
	IN TOKEN_TYPE         TokenType,
	OUT PHANDLE           NewTokenHandle);

typedef NTSTATUS(WINAPI *NtQuerySystemInformation_t)(IN SYSTEM_INFORMATION_CLASS SystemInformationClass,
	OUT PVOID                   SystemInformation,
	IN ULONG                    SystemInformationLength,
	OUT PULONG                  ReturnLength);


typedef NTSTATUS(WINAPI *NtSetInformationProcess_t)(IN HANDLE           ProcessHandle,
	IN PROCESSINFOCLASS ProcessInformationClass,
	IN PVOID            ProcessInformation,
	IN ULONG            ProcessInformationLength);

typedef NTSTATUS(WINAPI *NtCreateDirectoryObject_t)(OUT PHANDLE           DirectoryHandle,
	IN ACCESS_MASK        DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes);

typedef NTSTATUS(WINAPI *NtOpenDirectoryObject_t)(OUT PHANDLE           DirectoryHandle,
	IN ACCESS_MASK        DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes);

typedef VOID(WINAPI *RtlInitUnicodeString_t)(IN OUT PUNICODE_STRING DestinationString,
	IN PCWSTR              SourceString OPTIONAL);

typedef NTSTATUS(WINAPI *NtCreateSymbolicLinkObject_t)(OUT PHANDLE           SymbolicLinkHandle,
	IN ACCESS_MASK        DesiredAccess,
	IN POBJECT_ATTRIBUTES ObjectAttributes,
	IN PUNICODE_STRING    TargetName);

ZwClose_t                     ZwClose;
ZwOpenProcess_t               ZwOpenProcess;
ZwDuplicateToken_t            ZwDuplicateToken;
ZwOpenProcessToken_t          ZwOpenProcessToken;
PsGetCurrentProcess_t         PsGetCurrentProcess;
RtlInitUnicodeString_t        RtlInitUnicodeString;
NtOpenDirectoryObject_t       NtOpenDirectoryObject;
NtMapUserPhysicalPages_t      NtMapUserPhysicalPages;
NtQueryIntervalProfile_t      NtQueryIntervalProfile;
NtSetInformationProcess_t     NtSetInformationProcess;
ZwSetInformationProcess_t     ZwSetInformationProcess;
NtAllocateReserveObject_t     NtAllocateReserveObject;
NtAllocateVirtualMemory_t     NtAllocateVirtualMemory;
NtCreateDirectoryObject_t     NtCreateDirectoryObject;
PsReferencePrimaryToken_t     PsReferencePrimaryToken;
NtQuerySystemInformation_t    NtQuerySystemInformation;
PsLookupProcessByProcessId_t  PsLookupProcessByProcessId;
NtCreateSymbolicLinkObject_t  NtCreateSymbolicLinkObject;